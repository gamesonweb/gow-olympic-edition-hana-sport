import sys
import os
import re
import argparse

def search_protos(proto_path):
    protos = []
    for root, dirs, files in os.walk(proto_path):
        for file in files:
            if file.endswith(".proto"):
                protos.append(os.path.join(root, file))
    return protos


def main():
    # parse arguments
    parser = argparse.ArgumentParser(description="Generate GO code from protobuf file")
    parser.add_argument("--proto", help="Path to protobuf file", required=True)
    parser.add_argument("--out", help="Output directory", required=True)
    args = parser.parse_args()

    print("Generating GO code from %s to %s" % (args.proto, args.out))

    command_matcher = re.compile(r"message\s+(\w+Msg)\s+{")
    command_id_matcher = re.compile(r"\s+option\s+\(msg_id\)\s+=\s+(\d+);")

    # read proto file
    proto_lines = []
    # for each .proto file
    for proto_file in search_protos(args.proto):
        with open(proto_file, "r") as f:
            proto_lines += f.readlines()

    cs_file_content = f"""
// Code generated by message-interface-generator.py. DO NOT EDIT.
package pb
        """

    # extract message names including "Command" suffix using regex
    command_names = [command_matcher.match(line).group(1) for line in proto_lines if command_matcher.match(line)]
    # extract command ids using regex
    command_ids = [command_id_matcher.match(line).group(1) for line in proto_lines if
                   command_id_matcher.match(line)]
    if len(command_names) == 0:
        sys.exit(0)

    if len(command_names) != len(command_ids):
        print("Error: number of commands and command ids must be equal (%d, %d, %d)" % (
            len(command_names), len(command_ids)))
        sys.exit(1)

    # generate Go code
    for i in range(len(command_names)):
        cs_file_content += f"""
var {command_names[i]}Id = byte({command_ids[i]})

func (m *{command_names[i]}) Id() byte {{
    return {command_ids[i]}
}}
func (m *{command_names[i]}) New() Msg {{
    return &{command_names[i]}{{}}
}}"""
        # generate the factory from command id and byte array
    cs_file_content += """
func Create(id byte) Msg {
        switch id {
                           """
    for i in range(len(command_names)):
        cs_file_content += f"""
    case {command_ids[i]}:
        return &{command_names[i]}{{}}
        """
    cs_file_content += """
    default:
        return nil
    }
}
        """

    # write Go code to file
    with open(args.out, "w") as f:
        f.write(cs_file_content)


if __name__ == "__main__":
    main()
